server.port=7070

spring.application.name=rocketmq-web

#rocketmq 自动创建topic，客户版本与服务端版本必须一致，这个设计真的难搞
======================stream 配置=============>
# configure the nameserver of rocketmq 测试通过,formats: `host:port;host:port`.
spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876
# configure the output binding named output
spring.cloud.stream.bindings.output.destination=test-topic
spring.cloud.stream.bindings.output.content-type=application/json
#生产者不用定义分组
#spring.cloud.stream.bindings.output.group=xxx
#生产者使用事务设置分组
#spring.cloud.stream.rocketmq.bindings.output.producer.group=my-p-test-group
#生产者使用事务true
#spring.cloud.stream.rocketmq.bindings.output.producer.transactional=false

# configure the input binding named input
spring.cloud.stream.bindings.input.destination=test-topic
spring.cloud.stream.bindings.input.content-type=application/json
#消费端必须要配置，用这个来区别分组消息，同一个分组，那么最终只有一条消息被消费
spring.cloud.stream.bindings.input.group=test-group
#只接收指定的tag,RocketMQ建议我们一个应用就使用一个Topic，不同的消息类型通过Tag来区分，多个Tag之间通过双竖线分隔
spring.cloud.stream.rocketmq.bindings.input.consumer.tags=tag0||tag1||testTag
#广播模式，RocketMQ的消息消费有两种方式，CLUSTERING和BROADCASTING，默认是CLUSTERINIG
#CLUSTERING：比如消息队列中有100条消息，当同时有3个相同消费者组的消费者按照CLUSTERING方式进行消息消费时，它们总的消息的消费数量是100
#BROADCASTIN：（广播模式）当消息队列中有100条消息时，如果有相同消费者组的3个消费者时，每个消费者都将完整的消费这100条消息
#spring.cloud.stream.rocketmq.bindings.input.consumer.broadcasting=true
#消息排序，但是还是偶尔出现乱序，发送方必须也要保证，整体效果还是可以的
spring.cloud.stream.rocketmq.bindings.input.consumer.orderly=true


#消费消息失败后，重置次数，系统默认3次
spring.cloud.stream.bindings.input.consumer.maxAttempts=5
#重试的初始时间间隔默认是1秒，之后依次翻倍，最大时间间隔是10秒，即第一次重试的间隔时间是1秒，第二次是2秒，第三次是4秒，以此类推，最大时间间隔超过10秒后取10秒。下面的配置定义了重试的初始时间间隔是500豪秒，每次翻3倍，最大的间隔时间是8秒，即第一次的重试间隔是500毫秒，第二次是1500毫秒，第三次是4500毫秒，第四次以后是8000毫秒
spring.cloud.stream.bindings.input.consumer.backOffInitialInterval=500
spring.cloud.stream.bindings.input.consumer.backOffMultiplier=3
spring.cloud.stream.bindings.input.consumer.backOffMaxInterval=8000

#默认情况下，每个Binding对应的消费者线程数是1
spring.cloud.stream.bindings.input.consumer.concurrency=3

#测试消息2==========
spring.cloud.stream.bindings.output2.destination=test-topic2
spring.cloud.stream.bindings.input2.destination=test-topic2
spring.cloud.stream.bindings.input2.group=test-group2
======================stream 配置=============>

======================RocketmqTemplate 配置=============>
#必须配置
#指定nameServer
rocketmq.nameServer=127.0.0.1:9876 
#指定发送者组名 相当于rabbitmq的virtual host 逻辑上的划分,加上这个后RocketMQTemplate发送异常了,因此干掉这个
#rocketmq.producer.group=my-template-group

#其他可选配置
rocketmq.producer.send-message-timeout=300000
rocketmq.producer.compress-message-body-threshold=4096
rocketmq.producer.max-message-size=4194304
rocketmq.producer.retry-times-when-send-async-failed=0
rocketmq.producer.retry-next-server=true
rocketmq.producer.retry-times-when-send-failed=2

======================RocketmqTemplate 配置 =============>

#
##nacos配置=========>
#spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
#
##nacos整合seata=======>
##必须配置，读取配置项目
#seata.config.type=nacos
###非必须
#seata.config.nacos.serverAddr=127.0.0.1:8848
###必须
#seata.registry.type=nacos
###必须配置，找到找到注册中心配置项目
#seata.registry.nacos.serverAddr=127.0.0.1:8848
###必须，客户端，服务端必须一致
#spring.cloud.alibaba.seata.tx-service-group=my-seata-tx-service-group
#
##file配置start=======================>
##服务地址,只针对file有用,项目：resource目录下面必须存在file.conf文件
##seata.service.grouplist=127.0.0.1:8099
##nacos配置=========>
#
##链接池
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
##可以不用指定，默认随依赖包
##spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc\:mysql\://127.0.0.1\:3306/demo?serverTimezone\=UTC&useUnicode\=true&zeroDateTimeBehavior\=convertToNull&characterEncoding\=UTF-8&autoReconnect\=true&&useSSL\=false
#spring.datasource.username=root
#spring.datasource.password=123456
##初始化链接数大小
#spring.datasource.druid.initial-size=5
##最大链接数大小
#spring.datasource.druid.max-active=50
##空闲链接数大小
#spring.datasource.druid.min-idle=2
##链接超时时间，单位ms
#spring.datasource.druid.max-wait=50000
#
##mybatis========================
##mybatis-plus.executor-type=simple
##mybatis-plus.check-config-location=false
##mybatis-plus.type-aliases-package=com.my.seata.*.po
##mybatis-plus.mapper-locations=classpath*:com/my/seata/*/dao/*.xml
##mybatis-plus.configuration.jdbc-type-for-null=null
##mybatis-plus.configuration.map-underscore-to-camel-case=true
##以上配置参数可以不设置
#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
##mybatis-plus.global-config.banner=false
##主键自动，要加
#mybatis-plus.global-config.db-config.id-type=AUTO
##mybatis-plus.global-config.db-config.logic-delete-value=1
##mybatis-plus.global-config.db-config.logic-not-delete-value=0
#
#spring.main.allow-bean-definition-overriding=true
