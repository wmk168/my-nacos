#引入多个配置文件，以application开头
spring.profiles.include=baseConfig

server.port=6070

#getway 该配置无效，需要分析#不支持,需要自定义
server.servlet.contextPath=/api
#不支持
spring.mvc.servlet.contextPath=/api2

spring.application.name=my-getway-web
#多个不同的注册中心支持，注意：如果另一个注册中心不稳定，那么提供者也有可能出现异常，因为负载均衡自动切换到不同的注册中心获取提供者
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848,127.0.0.1:8848

#启用熔断机制true,这样feign callback才有用
feign.hystrix.enabled=true

#feign ribbon 读取数据，有效10s
ribbon.ReadTimeout=10000
#feign ribbon链接超时，有效
ribbon.ConnectTimeout=5000

#熔断超时启用 跟Feign没有任何关系，是单独组件，配置@EnableCircuitBreaker使用
hystrix.command.default.execution.timeout.enabled=true
#熔断超时毫秒,单个请求超时5s,+重试>10s，超15s则熔断
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=15000


spring.cloud.gateway.enabled=true
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.lower-case-service-id=true

==================getway整合nacos配置中心===============>
#自定义配置，代码
spring.cloud.getway.nacos.server-addr=127.0.0.1:8848
==================getway整合nacos配置中心===============>

==================getway配置文件配置=====================>
#routes是一个列表
#对应提供者服务名称
#spring.cloud.gateway.routes[0].id=user-provider
#lb:代表负载均衡意思
#spring.cloud.gateway.routes[0].uri=lb://user-provider

#predicates是一个数组，name：规则名称，目前有10个，有Path，Query，Method，Header，After，Before，Between，Cookie，
#spring.cloud.gateway.routes[0].predicates[0].name=Path
#设置访问路径
#spring.cloud.gateway.routes[0].predicates[0].args.map.Path=/user/**
#未找到测试方式
#spring.cloud.gateway.routes[0].predicates[0].args.map.fallbackUri=forward:/mybackUri

#增加个前缀,测试配置有效
#spring.cloud.gateway.routes[0].filters[0].name=StripPrefix
#增加个前缀,测试配置无效，只能用代码弄xxxxx
#spring.cloud.gateway.routes[0].filters[0].args.map.StripPrefix=1
#这个配置有效yyyyyyyyyyyyyy
#spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

#增加个前缀,测试配置有效
#spring.cloud.gateway.routes[0].filters[0].name=PrefixPath
#增加个前缀,测试配置无效，只能用代码弄
#spring.cloud.gateway.routes[0].filters[0].args[PrefixPath]=/api
#这个有效
#spring.cloud.gateway.routes[0].filters[0]=PrefixPath=/api

#或者：
#spring.cloud.gateway.discovery.locator.predicates[0].name: Path
#2spring.cloud.gateway.discovery.locator.predicates[0].args[pattern]: "'/'+serviceId+'/**'"



